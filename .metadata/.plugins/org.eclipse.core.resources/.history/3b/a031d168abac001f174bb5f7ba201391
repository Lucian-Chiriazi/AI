package main;

import java.util.Scanner;
import java.io.File;
import java.io.IOException;
public class ApplicationRunner {

	public static void main(String[] args) {
		int[][] digitDataSet1 = new int[2810][64];
        int[][] digitDataSet2 = new int[2810][64];
        int[] categories1 = new int[2810];
        int[] categories2 = new int[2810];
        
     // Read data
        readDataSet("digits1.csv", digitDataSet1, categories1);
        readDataSet("digits2.csv", digitDataSet2, categories2);
        
     // Perform Euclidean distance comparison
        for (int i = 0; i < 2810; i++) {
            double minDistance = Double.MAX_VALUE;
            int closestPattern = -1;

            // Compare with each pattern in the second dataset
            for (int j = 0; j < 2810; j++) {
                double distance = calculateEuclideanDistance(digitDataSet1[i], digitDataSet2[j]);
                
                if (distance < minDistance) {
                    minDistance = distance;
                    closestPattern = j;
                }
            }

            // Print results
            System.out.printf("Pattern %d (category %d, dataset 1) is closest to pattern %d (category %d, dataset 2) with distance %.2f%n",
                    i + 1, categories1[i],
                    closestPattern + 1, categories2[closestPattern],
                    minDistance);
        }

	}

	private static void readDataSet (String fileName, int[][] digitData, int[] categories) {
		try (Scanner scanner = new Scanner(new File(fileName))) {
            int rowCount = 0;

            while (scanner.hasNextLine() && rowCount < digitData.length) {
                String line = scanner.nextLine();
                String[] values = line.split(",");

                // Store the first 64 values in digitData
                for (int i = 0; i < 64; i++) {
                    digitData[rowCount][i] = Integer.parseInt(values[i]);
                }

                // Store the category (last value)
                categories[rowCount] = Integer.parseInt(values[64]);

                rowCount++;
            }
        } catch (IOException e) {
            System.out.println("Error reading file: " + fileName + " - " + e.getMessage());
        }
    
	}
	
	private static double calculateEuclideanDistance(int[] pattern1, int[] pattern2) {
        double sumOfSquares = 0.0;

        for (int i = 0; i < pattern1.length; i++) {
            int diff = pattern1[i] - pattern2[i];
            sumOfSquares += diff * diff;
        }

        return Math.sqrt(sumOfSquares);
    }
}
